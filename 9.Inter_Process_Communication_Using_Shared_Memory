#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/types.h>
#include <unistd.h>
#include <errno.h>

#define SHM_SIZE 1024  

int main() {
    pid_t pid;
    key_t key = 1234; 
    int shmid;
    char *shmaddr;

    if ((shmid = shmget(key, SHM_SIZE, IPC_CREAT | 0666)) < 0) {
        perror("shmget");
        exit(1);
    }

    pid = fork();

    if (pid < 0) {
        perror("fork");
        exit(1);
    } else if (pid == 0) {  // Child process
        shmaddr = shmat(shmid, NULL, 0);
        if (shmaddr == (char *)-1) {
            perror("shmat");
            exit(1);
        }

        printf("Child Process: Waiting for data from parent...\n");
        while (strlen(shmaddr) == 0) {  
            usleep(100);  
        }
        printf("Child Process: Received data: \"%s\"\n", shmaddr);

        shmdt(shmaddr);

    } else { 
        shmaddr = shmat(shmid, NULL, 0);
        if (shmaddr == (char *)-1) {
            perror("shmat");
            exit(1);
        }

        printf("Parent Process: Writing data to shared memory...\n");
        char *message = "Hello from parent!";
        strncpy(shmaddr, message, SHM_SIZE);

        sleep(1);

        shmdt(shmaddr);
        shmctl(shmid, IPC_RMID, NULL); 
    }

    return 0;
}
