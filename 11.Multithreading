#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_THREADS 5

void* thread_function(void* arg) {
    int thread_id = *(int*)arg;
    printf("Thread %d: Starting...\n", thread_id);

    sleep(1);

    printf("Thread %d: Finished!\n", thread_id);
    free(arg);  
    pthread_exit(NULL);
}

int main() {
    pthread_t threads[NUM_THREADS];
    int i;

    printf("Main Program: Creating %d threads...\n", NUM_THREADS);

    for (i = 0; i < NUM_THREADS; i++) {
        int* thread_id = malloc(sizeof(int));  
        if (thread_id == NULL) {
            perror("malloc");
            exit(1);
        }
        *thread_id = i;

        if (pthread_create(&threads[i], NULL, thread_function, thread_id) != 0) {
            perror("pthread_create");
            exit(1);
        }
    }

    for (i = 0; i < NUM_THREADS; i++) {
        if (pthread_join(threads[i], NULL) != 0) {
            perror("pthread_join");
            exit(1);
        }
    }

    printf("Main Program: All threads completed.\n");
    return 0;
}
