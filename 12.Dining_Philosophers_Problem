#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

pthread_mutex_t forks[NUM_PHILOSOPHERS]; 

void* philosopher(void* arg) {
    int id = *(int*)arg;
    free(arg); 
    while (1) {
        printf("Philosopher %d is thinking.\n", id);
        sleep(rand() % 3 + 1);  

        printf("Philosopher %d is hungry and tries to pick up forks.\n", id);

        
        pthread_mutex_lock(&forks[id]);
        printf("Philosopher %d picked up the left fork.\n", id);

        pthread_mutex_lock(&forks[(id + 1) % NUM_PHILOSOPHERS]);
        printf("Philosopher %d picked up the right fork.\n", id);

        printf("Philosopher %d is eating.\n", id);
        sleep(rand() % 2 + 1);  // Simulate eating time

        pthread_mutex_unlock(&forks[(id + 1) % NUM_PHILOSOPHERS]);
        printf("Philosopher %d put down the right fork.\n", id);

        pthread_mutex_unlock(&forks[id]);
        printf("Philosopher %d put down the left fork.\n", id);
    }

    pthread_exit(NULL);
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        if (pthread_mutex_init(&forks[i], NULL) != 0) {
            perror("pthread_mutex_init");
            exit(1);
        }
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        int* id = malloc(sizeof(int));
        if (id == NULL) {
            perror("malloc");
            exit(1);
        }
        *id = i;
        if (pthread_create(&philosophers[i], NULL, philosopher, id) != 0) {
            perror("pthread_create");
            exit(1);
        }
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&forks[i]);
    }

    return 0;
}
