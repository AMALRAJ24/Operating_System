#include <stdio.h>
#include <stdlib.h>

#define MAX_BLOCKS 100 // Maximum number of blocks in the file system

typedef struct {
    int indexBlock;        // Index block number
    int fileBlocks[MAX_BLOCKS]; // Pointers to file blocks
    int blockCount;        // Number of blocks allocated
} File;

// Function to create a file with indexed allocation
void createFile(File *file, int blockCount, int freeBlocks[], int totalBlocks) {
    if (blockCount > totalBlocks) {
        printf("Error: Not enough free blocks available.\n");
        return;
    }

    file->blockCount = blockCount;

    // Allocate index block
    for (int i = 0; i < totalBlocks; i++) {
        if (freeBlocks[i] == 0) {
            file->indexBlock = i;
            freeBlocks[i] = 1;
            printf("Index block allocated at block %d.\n", i);
            break;
        }
    }

    // Allocate data blocks
    int allocated = 0;
    for (int i = 0; i < totalBlocks && allocated < blockCount; i++) {
        if (freeBlocks[i] == 0) {
            file->fileBlocks[allocated] = i;
            freeBlocks[i] = 1;
            printf("Block %d allocated for data.\n", i);
            allocated++;
        }
    }

    if (allocated < blockCount) {
        printf("Error: Could not allocate enough blocks for the file.\n");
    } else {
        printf("File created successfully with %d blocks.\n", blockCount);
    }
}

// Function to display file information
void displayFile(File *file) {
    printf("\nFile Information:\n");
    printf("Index Block: %d\n", file->indexBlock);
    printf("Data Blocks: ");
    for (int i = 0; i < file->blockCount; i++) {
        printf("%d ", file->fileBlocks[i]);
    }
    printf("\n");
}

// Function to simulate file system management
int main() {
    int totalBlocks;
    int freeBlocks[MAX_BLOCKS] = {0}; // 0 indicates free, 1 indicates allocated

    printf("Enter the total number of blocks in the file system: ");
    scanf("%d", &totalBlocks);

    if (totalBlocks > MAX_BLOCKS) {
        printf("Error: Maximum number of blocks exceeded.\n");
        return 1;
    }

    File file;
    int choice, blockCount;

    while (1) {
        printf("\nFile System Menu:\n");
        printf("1. Create File\n");
        printf("2. Display File Information\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the number of blocks required for the file: ");
                scanf("%d", &blockCount);
                createFile(&file, blockCount, freeBlocks, totalBlocks);
                break;

            case 2:
                displayFile(&file);
                break;

            case 3:
                printf("Exiting the program.\n");
                exit(0);

            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
