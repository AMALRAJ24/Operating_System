#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <unistd.h>
#include <errno.h>

#define MSG_SIZE 100

struct msg_buffer {
    long msg_type;
    char msg_text[MSG_SIZE];
};

int main() {
    key_t key = 1234;  
    int msgid;
    pid_t pid;

    if ((msgid = msgget(key, IPC_CREAT | 0666)) < 0) {
        perror("msgget");
        exit(1);
    }

    pid = fork();

    if (pid < 0) {
        perror("fork");
        exit(1);
    } else if (pid == 0) { 
        struct msg_buffer message;

        printf("Child Process: Waiting for a message...\n");
        if (msgrcv(msgid, &message, sizeof(message.msg_text), 1, 0) < 0) {
            perror("msgrcv");
            exit(1);
        }
        printf("Child Process: Received message: \"%s\"\n", message.msg_text);

        if (msgctl(msgid, IPC_RMID, NULL) < 0) {
            perror("msgctl");
            exit(1);
        }
        printf("Child Process: Message queue removed.\n");

    } else { 
        struct msg_buffer message;
        message.msg_type = 1;  
        strncpy(message.msg_text, "Hello from parent!", MSG_SIZE);

        printf("Parent Process: Sending message...\n");
        if (msgsnd(msgid, &message, sizeof(message.msg_text), 0) < 0) {
            perror("msgsnd");
            exit(1);
        }
        printf("Parent Process: Message sent.\n");

        wait(NULL);
    }

    return 0;
}
