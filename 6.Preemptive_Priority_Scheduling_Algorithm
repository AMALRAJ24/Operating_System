#include <stdio.h>

#define MAX 100

typedef struct {
    int id;             
    int burst_time;    
    int arrival_time;   
    int priority;      
    int remaining_time; 
    int completion_time; 
    int waiting_time;   /
    int turnaround_time; 
} Process;

void preemptive_priority_scheduling(Process p[], int n) {
    int time = 0, completed = 0, min_priority, index;
    int is_completed[MAX] = {0}; 
    while (completed < n) {
        min_priority = 1e9; 
        index = -1;

        for (int i = 0; i < n; i++) {
            if (p[i].arrival_time <= time && !is_completed[i] && p[i].priority < min_priority) {
                min_priority = p[i].priority;
                index = i;
            }
        }

        if (index == -1) {
            // No process is ready, advance time
            time++;
            continue;
        }

        p[index].remaining_time--;

        if (p[index].remaining_time == 0) {
            completed++;
            is_completed[index] = 1;
            p[index].completion_time = time + 1;
            p[index].turnaround_time = p[index].completion_time - p[index].arrival_time;
            p[index].waiting_time = p[index].turnaround_time - p[index].burst_time;
        }

        time++;
    }
}

void print_gantt_chart(Process p[], int n) {
    printf("\nProcess\tAT\tBT\tPriority\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t\t%d\t%d\t%d\n", p[i].id, p[i].arrival_time, p[i].burst_time, p[i].priority,
               p[i].completion_time, p[i].turnaround_time, p[i].waiting_time);
    }
}

int main() {
    int n;
    Process p[MAX];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter Arrival Time, Burst Time, and Priority for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        p[i].id = i + 1;
        printf("Arrival Time: ");
        scanf("%d", &p[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &p[i].burst_time);
        printf("Priority (lower number = higher priority): ");
        scanf("%d", &p[i].priority);
        p[i].remaining_time = p[i].burst_time; // Initially, remaining time is the burst time
    }

    preemptive_priority_scheduling(p, n);

    // Print the Gantt chart
    print_gantt_chart(p, n);

    return 0;
}
