#include <stdio.h>
#include <stdlib.h>

#define MAX_BLOCKS 10
#define MAX_PROCESSES 10

void first_fit(int block_sizes[], int blocks, int process_sizes[], int processes) {
    printf("\nFirst-Fit Allocation:\n");
    int allocation[MAX_PROCESSES] = { -1 }; 

    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < blocks; j++) {
            if (block_sizes[j] >= process_sizes[i]) {
                allocation[i] = j; 
                block_sizes[j] -= process_sizes[i]; 
                break;
            }
        }
    }

    for (int i = 0; i < processes; i++) {
        if (allocation[i] != -1)
            printf("Process %d allocated to Block %d\n", i + 1, allocation[i] + 1);
        else
            printf("Process %d not allocated\n", i + 1);
    }
}

void best_fit(int block_sizes[], int blocks, int process_sizes[], int processes) {
    printf("\nBest-Fit Allocation:\n");
    int allocation[MAX_PROCESSES] = { -1 };

    for (int i = 0; i < processes; i++) {
        int best_idx = -1;

        for (int j = 0; j < blocks; j++) {
            if (block_sizes[j] >= process_sizes[i]) {
                if (best_idx == -1 || block_sizes[j] < block_sizes[best_idx]) {
                    best_idx = j;
                }
            }
        }

        if (best_idx != -1) {
            allocation[i] = best_idx;
            block_sizes[best_idx] -= process_sizes[i];
        }
    }

    for (int i = 0; i < processes; i++) {
        if (allocation[i] != -1)
            printf("Process %d allocated to Block %d\n", i + 1, allocation[i] + 1);
        else
            printf("Process %d not allocated\n", i + 1);
    }
}

void worst_fit(int block_sizes[], int blocks, int process_sizes[], int processes) {
    printf("\nWorst-Fit Allocation:\n");
    int allocation[MAX_PROCESSES] = { -1 };

    for (int i = 0; i < processes; i++) {
        int worst_idx = -1;

        for (int j = 0; j < blocks; j++) {
            if (block_sizes[j] >= process_sizes[i]) {
                if (worst_idx == -1 || block_sizes[j] > block_sizes[worst_idx]) {
                    worst_idx = j;
                }
            }
        }

        if (worst_idx != -1) {
            allocation[i] = worst_idx;
            block_sizes[worst_idx] -= process_sizes[i];
        }
    }

    for (int i = 0; i < processes; i++) {
        if (allocation[i] != -1)
            printf("Process %d allocated to Block %d\n", i + 1, allocation[i] + 1);
        else
            printf("Process %d not allocated\n", i + 1);
    }
}

int main() {
    int block_sizes[MAX_BLOCKS], process_sizes[MAX_PROCESSES];
    int blocks, processes;

    printf("Enter the number of memory blocks: ");
    scanf("%d", &blocks);

    printf("Enter the sizes of the memory blocks:\n");
    for (int i = 0; i < blocks; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &block_sizes[i]);
    }

    printf("Enter the number of processes: ");
    scanf("%d", &processes);

    printf("Enter the sizes of the processes:\n");
    for (int i = 0; i < processes; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &process_sizes[i]);
    }

    int block_sizes_clone[MAX_BLOCKS];

    for (int i = 0; i < blocks; i++)
        block_sizes_clone[i] = block_sizes[i];
    first_fit(block_sizes_clone, blocks, process_sizes, processes);

    for (int i = 0; i < blocks; i++)
        block_sizes_clone[i] = block_sizes[i];
    best_fit(block_sizes_clone, blocks, process_sizes, processes);

    for (int i = 0; i < blocks; i++)
        block_sizes_clone[i] = block_sizes[i];
    worst_fit(block_sizes_clone, blocks, process_sizes, processes);

    return 0;
}
