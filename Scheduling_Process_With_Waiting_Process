#include <stdio.h>

struct Process {
    int id;
    int burst_time;
    int wait_time;
    int turn_time;
    int completed;
};

void calculate_times(struct Process processes[], int n) {
    int time = 0, completed = 0, shortest = -1, min_burst;

    while (completed < n) {
        min_burst = 1e9;

        for (int i = 0; i < n; i++) {
            if (!processes[i].completed && processes[i].burst_time < min_burst) {
                min_burst = processes[i].burst_time;
                shortest = i;
            }
        }

        time += processes[shortest].burst_time;
        processes[shortest].completed = 1;
        processes[shortest].turn_time = time;
        processes[shortest].wait_time = time - processes[shortest].burst_time;
        completed++;
    }
}

void display_processes(struct Process processes[], int n) {
    printf("PID\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].burst_time, processes[i].wait_time, processes[i].turn_time);
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter the burst time for process %d: ", processes[i].id);
        scanf("%d", &processes[i].burst_time);
        processes[i].completed = 0;
    }

    calculate_times(processes, n);
    display_processes(processes, n);

    return 0;
}
