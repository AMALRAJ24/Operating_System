#include <stdio.h>

typedef struct {
    int pid;         // Process ID
    int arrival;     // Arrival Time
    int burst;       // Burst Time
    int priority;    // Priority (smaller number means higher priority)
    int completion;  // Completion Time
    int turnaround;  // Turnaround Time
    int waiting;     // Waiting Time
    int executed;    // Execution status
} Process;

void sortByArrival(Process p[], int n) {
    // Sort processes by arrival time (ascending)
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (p[j].arrival > p[j + 1].arrival) {
                Process temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
        }
    }
}

int findHighestPriorityProcess(Process p[], int n, int currentTime) {
    int highestPriority = __INT_MAX__;
    int index = -1;

    for (int i = 0; i < n; i++) {
        if (!p[i].executed && p[i].arrival <= currentTime && p[i].priority < highestPriority) {
            highestPriority = p[i].priority;
            index = i;
        }
    }
    return index;
}

void calculateTimes(Process p[], int n) {
    int completed = 0;
    int currentTime = 0;

    while (completed < n) {
        int index = findHighestPriorityProcess(p, n, currentTime);

        if (index == -1) {
            // If no process is ready, move forward in time
            currentTime++;
            continue;
        }

        // Execute the process
        currentTime += p[index].burst;
        p[index].completion = currentTime;
        p[index].turnaround = p[index].completion - p[index].arrival;
        p[index].waiting = p[index].turnaround - p[index].burst;
        p[index].executed = 1;

        completed++;
    }
}

void displayProcesses(Process p[], int n) {
    printf("PID\tArrival\tBurst\tPriority\tCompletion\tTurnaround\tWaiting\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t\t%d\t\t%d\n", 
                p[i].pid, 
                p[i].arrival, 
                p[i].burst, 
                p[i].priority, 
                p[i].completion, 
                p[i].turnaround, 
                p[i].waiting);
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    for (int i = 0; i < n; i++) {
        printf("Enter arrival time, burst time, and priority for process %d: ", i + 1);
        scanf("%d %d %d", &processes[i].arrival, &processes[i].burst, &processes[i].priority);
        processes[i].pid = i + 1;
        processes[i].executed = 0; // Mark process as not executed
    }

    sortByArrival(processes, n);
    calculateTimes(processes, n);
    displayProcesses(processes, n);

    return 0;
}
